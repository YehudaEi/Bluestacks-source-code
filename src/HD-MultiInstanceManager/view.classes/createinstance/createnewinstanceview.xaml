<bluestacksCore:UiWindowBase x:Class="MultiInstanceManagerMVVM.View.Classes.CreateInstance.CreateNewInstanceView"
                             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                             xmlns:System="clr-namespace:System;assembly=mscorlib"
                             xmlns:local="clr-namespace:MultiInstanceManagerMVVM.View.Classes.CreateInstance"
                             xmlns:bluestacksCore="clr-namespace:BlueStacks.Core;assembly=BlueStacks.Core"
                             xmlns:Common="clr-namespace:BlueStacks.Common;assembly=HD-Common"
                             xmlns:helper="clr-namespace:MultiInstanceManagerMVVM.Helper"
                             xmlns:converters="clr-namespace:MultiInstanceManagerMVVM.Helper.Converters"
                             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
                             xmlns:command="http://www.galasoft.ch/mvvmlight"
                             xmlns:view="clr-namespace:MultiInstanceManagerMVVM.View.Classes.CreateInstance"
                             WindowStyle="None" ShowInTaskbar="false" WindowState="Normal" AllowsTransparency="true"
                             Background="Transparent" SizeToContent="Height" Height="Auto" Width="480"
                             FocusVisualStyle="{x:Null}">
  <FrameworkElement.Resources>
    <bluestacksCore:EnumToBoolConverter x:Key="EnumToBoolConverter"/>
    <Common:EnumToVisibilityConverter x:Key="EnumToVisibilityConverter"/>
    <bluestacksCore:InverseVisibilityConverter x:Key="InverseVisibilityConverter"/>
    <converters:NewInstanceTypeToTextMultiConverter x:Key="NewInstanceTypeToTextMultiConverter"/>
    <bluestacksCore:BooleansToInverseBooleanConverter x:Key="BooleansToInverseBooleanConverter"/>
    <bluestacksCore:MultiBooleanToVisibilityConverter x:Key="MultiBooleanToVisibilityConverter"/>
    <bluestacksCore:NullToBooleanConverter x:Key="NullToBooleanConverter"/>
    <bluestacksCore:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
    <Common:BooleansToInverseVisibilityConverter2 x:Key="booleansToInverseVisibilityConverter2"/>
    <Common:BooleanToVisibilityConverter2 x:Key="booleanToVisibilityConverter"/>
    <bluestacksCore:BindingProxy x:Key="BindingProxy" Data="{Binding}"/>
    <Style x:Key="CenteredHorizontalOffsetStyle" TargetType="{x:Type Popup}">
      <Setter Property="Popup.HorizontalOffset">
        <Setter.Value>
          <MultiBinding Converter="{Common:CenterToolTipConverter}">
            <Binding Path="PlacementTarget.ActualWidth" RelativeSource="{RelativeSource Self}"/>
            <Binding Path="Child.ActualWidth" RelativeSource="{RelativeSource Self}"/>
          </MultiBinding>
        </Setter.Value>
      </Setter>
    </Style>
  </FrameworkElement.Resources>
  <Border Style="{StaticResource OuterBorder}">
    <Grid Margin="16,0,16,0">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="Auto"/>
      </Grid.RowDefinitions>
      <Grid Row="0">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="*"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <TextBlock Grid.Column="0" Margin="0,6,0,9" FontSize="16" FontWeight="SemiBold"
                   Foreground="{Binding Path=ColorModel.[ContextMenuItemForegroundColor]}">
          <TextBlock.Text>
            <MultiBinding Converter="{StaticResource NewInstanceTypeToTextMultiConverter}">
              <Binding Path="InstanceType"/>
              <Binding Path="LocaleModel"/>
            </MultiBinding>
          </TextBlock.Text>
        </TextBlock>
        <Common:CustomTextBlock Grid.Column="1" Margin="0,6,0,9" TextTrimming="CharacterEllipsis" FontSize="16" FontWeight="Normal"
                                Text="{Binding AppPlayerOemDisplayName}"
                                Foreground="{Binding Path=ColorModel.[SettingsWindowForegroundDimDimDimColor]}"/>
        <Common:CustomPictureBox Grid.Column="2" HorizontalAlignment="Right" VerticalAlignment="Center" ImageName="exit_close"
                                 Height="16" Width="16" ToolTip="{Binding Path=LocaleModel.[STRING_CLOSE], FallbackValue=Close}">
          <i:Interaction.Triggers>
            <i:EventTrigger EventName="MouseLeftButtonUp">
              <command:EventToCommand Command="{Binding CloseWindowCommand}"/>
            </i:EventTrigger>
          </i:Interaction.Triggers>
        </Common:CustomPictureBox>
      </Grid>
      <Border BorderThickness="0,1,0,0" Grid.Row="1" Padding="0,0,0,8"
              BorderBrush="{Binding Path=ColorModel.[HorizontalSeparator]}">
        <StackPanel Orientation="Vertical">
          <StackPanel Orientation="Horizontal" Margin="0,16,0,0"
                      Visibility="{Binding InstanceType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static Common:NewInstanceType.Clone}}">
            <TextBlock VerticalAlignment="Center" TextAlignment="Right" Width="100" TextWrapping="WrapWithOverflow"
                       FontSize="14" Text="{Binding Path=LocaleModel.[STRING_CLONE_FROM], FallbackValue='Clone from'}"
                       Foreground="{Binding Path=ColorModel.[ContextMenuItemForegroundColor]}"/>
            <Common:CustomComboBox Margin="24,0,0,0" Height="32" Width="320" FontSize="14" MaxDropDownHeight="100"
                                   VerticalAlignment="Center" DisplayMemberPath="Value" SelectedValuePath="Key"
                                   ItemsSource="{Binding CloneFromInstanceDict}"
                                   SelectedValue="{Binding CloneFromInstanceVmName, Mode=TwoWay}"/>
          </StackPanel>
          <StackPanel Orientation="Vertical" Margin="0,16,0,0">
            <StackPanel Orientation="Horizontal">
              <TextBlock VerticalAlignment="Center" TextAlignment="Right" Width="100" TextWrapping="WrapWithOverflow"
                         FontSize="14" Text="{Binding Path=LocaleModel.[STRING_CPU_CORES], FallbackValue='CPU cores'}"
                         Foreground="{Binding Path=ColorModel.[ContextMenuItemForegroundColor]}"/>
              <Grid Margin="24,0,0,0" Height="32" Width="{Binding CpuCorePerformanceWidth}">
                <Common:CustomComboBox FontSize="14" MaxDropDownHeight="100" VerticalAlignment="Center" DisplayMemberPath="CpuDisplayText"
                                       ItemsSource="{Binding CPUList}" SelectedValue="{Binding SelectedCPU, Mode=TwoWay}"/>
                <TextBlock HorizontalAlignment="Left" VerticalAlignment="Center" IsHitTestVisible="false" FontSize="14"
                           Margin="8,0,0,0" Text="{Binding Path=LocaleModel.[STRING_SELECT], FallbackValue=Select}"
                           Foreground="{Binding Path=ColorModel.[ComboBoxForegroundColor]}"
                           Visibility="{Binding SelectedCPU, Converter={StaticResource NullToVisibilityConverter}}"/>
              </Grid>
              <Common:CustomComboBox Margin="16,0,0,0" Height="32" FontSize="14" MaxDropDownHeight="100" VerticalAlignment="Center"
                                     SelectedValuePath="Key" DisplayMemberPath="Value" Width="{Binding CpuCoreCustomListWidth}"
                                     ItemsSource="{Binding CPUCoreDict}"
                                     Visibility="{Binding CpuCoreCustomVisibility, Converter={StaticResource booleanToVisibilityConverter}}"
                                     SelectedValue="{Binding CoreCount, Mode=TwoWay}"/>
            </StackPanel>
            <TextBlock FontSize="13" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="124,5,0,0"
                       TextWrapping="WrapWithOverflow"
                       Visibility="{Binding MaxCoreWarningTextVisibility, Converter={StaticResource booleanToVisibilityConverter}}"
                       Foreground="{Binding Path=ColorModel.[OrangeMouseOutBorderBackground]}"
                       Text="{Binding Path=LocaleModel.[STRING_MAX_CORE_WARNING], FallbackValue='Assigning all CPU cores to Bluestacks will cause overall system to lag/slowdown.'}"/>
            <StackPanel Orientation="Horizontal" Margin="0,16,0,0">
              <TextBlock VerticalAlignment="Center" TextAlignment="Right" Width="100" TextWrapping="WrapWithOverflow"
                         FontSize="14" Text="{Binding Path=LocaleModel.[STRING_RAM], FallbackValue=RAM}"
                         Foreground="{Binding Path=ColorModel.[ContextMenuItemForegroundColor]}"/>
              <Grid Margin="24,0,0,0" Height="32" Width="{Binding PerformanceRamComboWidth}">
                <Common:CustomComboBox FontSize="14" MaxDropDownHeight="100" VerticalAlignment="Center" DisplayMemberPath="RamDisplayText"
                                       ItemsSource="{Binding RamList}" SelectedValue="{Binding SelectedRAM, Mode=TwoWay}"/>
                <TextBlock HorizontalAlignment="Left" VerticalAlignment="Center" IsHitTestVisible="false" FontSize="14"
                           Margin="8,0,0,0" Text="{Binding Path=LocaleModel.[STRING_SELECT], FallbackValue=Select}"
                           Foreground="{Binding Path=ColorModel.[ComboBoxForegroundColor]}"
                           Visibility="{Binding SelectedRAM, Converter={StaticResource NullToVisibilityConverter}}"/>
              </Grid>
              <Common:CustomTextBox x:Name="CustomRam" Margin="16,0,0,0" Height="32" MaxLength="4" VerticalAlignment="Center"
                                    Width="{Binding CustomRamTextBoxWidth}"
                                    Visibility="{Binding CustomRamTextBoxVisibility, Converter={StaticResource booleanToVisibilityConverter}}">
                <i:Interaction.Behaviors>
                  <bluestacksCore:NumericBehavior/>
                </i:Interaction.Behaviors>
                <TextBox.Text>
                  <Binding Path="SelectedRAM.RAM" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                      <bluestacksCore:MinMaxRangeValidationRule>
                        <bluestacksCore:MinMaxRangeValidationRule.Wrapper>
                          <bluestacksCore:Wrapper Max="{Binding Path=Data.CurrentMaxRAM, Source={StaticResource BindingProxy}}"
                                                  Min="{Binding Path=Data.CurrentMinRAM, Source={StaticResource BindingProxy}}">
                            <bluestacksCore:Wrapper.ErrorMessage>
                              <MultiBinding StringFormat="{0} {1} - {2}">
                                <Binding Path="Data.LocaleModel.[STRING_CUSTOM_RAM_MESSAGE]" Source="{StaticResource BindingProxy}"/>
                                <Binding Path="Data.CurrentMinRAM" Source="{StaticResource BindingProxy}"/>
                                <Binding Path="Data.CurrentMaxRAM" Source="{StaticResource BindingProxy}"/>
                              </MultiBinding>
                            </bluestacksCore:Wrapper.ErrorMessage>
                          </bluestacksCore:Wrapper>
                        </bluestacksCore:MinMaxRangeValidationRule.Wrapper>
                      </bluestacksCore:MinMaxRangeValidationRule>
                    </Binding.ValidationRules>
                  </Binding>
                </TextBox.Text>
              </Common:CustomTextBox>
            </StackPanel>
          </StackPanel>
          <StackPanel Orientation="Horizontal" Margin="0,16,0,0">
            <TextBlock Grid.Column="0" Width="100" VerticalAlignment="Center" TextAlignment="Right"
                       TextWrapping="WrapWithOverflow" FontSize="14"
                       Text="{Binding Path=LocaleModel.[STRING_ASPECT_RATIO_NEW], FallbackValue=Resolution}"
                       Foreground="{Binding Path=ColorModel.[ContextMenuItemForegroundColor]}"/>
            <Common:CustomComboBox x:Name="OrientationComboBox" Margin="24,0,0,0" Height="32" Width="145" FontSize="14"
                                   MaxDropDownHeight="100" VerticalAlignment="Center" ToolTipWhenTrimmed="true"
                                   ToolTipText="{Binding SelectedItem.OrientationName, ElementName=OrientationComboBox}"
                                   ItemsSource="{Binding ResolutionsList}" SelectedValue="{Binding ResolutionType, Mode=TwoWay}">
              <ItemsControl.ItemTemplate>
                <DataTemplate>
                  <Common:CustomTextBlock Text="{Binding OrientationName}"/>
                </DataTemplate>
              </ItemsControl.ItemTemplate>
            </Common:CustomComboBox>
            <Common:CustomComboBox x:Name="ResolutionComboBox" Margin="16,0,0,0" Height="32" Width="159" FontSize="14"
                                   MaxDropDownHeight="100" VerticalAlignment="Center" ToolTipWhenTrimmed="true"
                                   SelectedValuePath="Key" ToolTipText="{Binding SelectedItem.Value, ElementName=ResolutionComboBox}"
                                   ItemsSource="{Binding SelectedItem.AvailableResolutionsDict, ElementName=OrientationComboBox}"
                                   SelectedValue="{Binding SelectedItem.CombinedResolution, ElementName=OrientationComboBox, Mode=TwoWay}"
                                   Visibility="{Binding Visibility, ElementName=CustomResolutionTextBoxes, Converter={StaticResource InverseVisibilityConverter}}">
              <ItemsControl.ItemTemplate>
                <DataTemplate>
                  <Common:CustomTextBlock Text="{Binding Value}"/>
                </DataTemplate>
              </ItemsControl.ItemTemplate>
            </Common:CustomComboBox>
          </StackPanel>
          <StackPanel x:Name="CustomResolutionTextBoxes" Orientation="Horizontal" Margin="0,16,0,0"
                      Visibility="{Binding SelectedItem.OrientationType, ElementName=OrientationComboBox, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static Common:OrientationType.Custom}}">
            <TextBlock VerticalAlignment="Center" TextAlignment="Right" Width="100" TextWrapping="WrapWithOverflow"
                       FontSize="14"
                       Text="{Binding Path=LocaleModel.[STRING_WIDTH_HEIGHT], FallbackValue='Width x Height'}"
                       Foreground="{Binding Path=ColorModel.[ContextMenuItemForegroundColor]}"/>
            <Common:CustomTextBox x:Name="CustomResolutionWidth" Margin="24,0,0,0" Height="32" Width="100" MaxLength="4"
                                  VerticalAlignment="Center">
              <i:Interaction.Behaviors>
                <bluestacksCore:NumericBehavior/>
              </i:Interaction.Behaviors>
              <TextBox.Text>
                <Binding Path="SelectedItem.ResolutionWidth" ElementName="OrientationComboBox" Mode="TwoWay"
                         UpdateSourceTrigger="PropertyChanged">
                  <Binding.ValidationRules>
                    <bluestacksCore:MinMaxRangeValidationRule>
                      <bluestacksCore:MinMaxRangeValidationRule.Wrapper>
                        <bluestacksCore:Wrapper Max="{Binding Path=Data.MaxResolutionWidth, Source={StaticResource BindingProxy}}"
                                                Min="{Binding Path=Data.MinResolutionWidth, Source={StaticResource BindingProxy}}">
                          <bluestacksCore:Wrapper.ErrorMessage>
                            <MultiBinding StringFormat="{0} {1} - {2}">
                              <Binding Path="Data.LocaleModel.[STRING_CUSTOM_WIDTH_MESSAGE]" Source="{StaticResource BindingProxy}"/>
                              <Binding Path="Data.MinResolutionWidth" Source="{StaticResource BindingProxy}"/>
                              <Binding Path="Data.MaxResolutionWidth" Source="{StaticResource BindingProxy}"/>
                            </MultiBinding>
                          </bluestacksCore:Wrapper.ErrorMessage>
                        </bluestacksCore:Wrapper>
                      </bluestacksCore:MinMaxRangeValidationRule.Wrapper>
                    </bluestacksCore:MinMaxRangeValidationRule>
                  </Binding.ValidationRules>
                </Binding>
              </TextBox.Text>
            </Common:CustomTextBox>
            <Common:CustomTextBox x:Name="CustomResolutionHeight" Margin="16,0,0,0" Height="32" Width="100" MaxLength="4"
                                  VerticalAlignment="Center">
              <i:Interaction.Behaviors>
                <bluestacksCore:NumericBehavior/>
              </i:Interaction.Behaviors>
              <TextBox.Text>
                <Binding Path="SelectedItem.ResolutionHeight" ElementName="OrientationComboBox" Mode="TwoWay"
                         UpdateSourceTrigger="PropertyChanged">
                  <Binding.ValidationRules>
                    <bluestacksCore:MinMaxRangeValidationRule>
                      <bluestacksCore:MinMaxRangeValidationRule.Wrapper>
                        <bluestacksCore:Wrapper Max="{Binding Path=Data.MaxResolutionHeight, Source={StaticResource BindingProxy}}"
                                                Min="{Binding Path=Data.MinResolutionHeight, Source={StaticResource BindingProxy}}">
                          <bluestacksCore:Wrapper.ErrorMessage>
                            <MultiBinding StringFormat="{0} {1} - {2}">
                              <Binding Path="Data.LocaleModel.[STRING_CUSTOM_HEIGHT_MESSAGE]" Source="{StaticResource BindingProxy}"/>
                              <Binding Path="Data.MinResolutionHeight" Source="{StaticResource BindingProxy}"/>
                              <Binding Path="Data.MaxResolutionHeight" Source="{StaticResource BindingProxy}"/>
                            </MultiBinding>
                          </bluestacksCore:Wrapper.ErrorMessage>
                        </bluestacksCore:Wrapper>
                      </bluestacksCore:MinMaxRangeValidationRule.Wrapper>
                    </bluestacksCore:MinMaxRangeValidationRule>
                  </Binding.ValidationRules>
                </Binding>
              </TextBox.Text>
            </Common:CustomTextBox>
          </StackPanel>
          <Grid Margin="0,16,0,0">
            <UIElement.Visibility>
              <MultiBinding Converter="{StaticResource MultiBooleanToVisibilityConverter}">
                <Binding Path="InstanceType" Converter="{StaticResource EnumToBoolConverter}"
                         ConverterParameter="{x:Static Common:NewInstanceType.Fresh}"/>
                <Binding Path="IsAndroidDownloaded"/>
              </MultiBinding>
            </UIElement.Visibility>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid Column="0" Width="100" VerticalAlignment="Center">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>
              <TextBlock Grid.Column="0" VerticalAlignment="Center" Width="80" TextAlignment="Right" TextWrapping="Wrap"
                         FontSize="14" Text="{Binding Path=LocaleModel.[STRING_ABI_SETTING], FallbackValue='ABI setting'}"
                         Foreground="{Binding Path=ColorModel.[ContextMenuItemForegroundColor]}"/>
              <Common:CustomPictureBox Grid.Column="1" Margin="2,0,0,0" VerticalAlignment="Center" Height="16" Width="16"
                                       ImageName="menu_help"
                                       ToolTip="{Binding Path=LocaleModel.[STRING_HELP_AND_SUPPORT], FallbackValue=Help}">
                <i:Interaction.Triggers>
                  <i:EventTrigger EventName="MouseLeftButtonDown">
                    <command:EventToCommand Command="{Binding ABIHelpSupportCommand}"/>
                  </i:EventTrigger>
                </i:Interaction.Triggers>
                <FrameworkElement.Style>
                  <Style TargetType="{x:Type Common:CustomPictureBox}">
                    <Style.Triggers>
                      <Trigger Property="UIElement.IsMouseOver" Value="true">
                        <Setter Property="FrameworkElement.Cursor" Value="Hand"/>
                      </Trigger>
                    </Style.Triggers>
                  </Style>
                </FrameworkElement.Style>
              </Common:CustomPictureBox>
            </Grid>
            <Grid Margin="24,0,0,0" Column="1" VerticalAlignment="Center">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Common:CustomRadioButton Grid.Column="0" FontSize="14" Height="20" HorizontalAlignment="Left" GroupName="Abi"
                                        IsChecked="{Binding AbiValue, Mode=TwoWay, Converter={StaticResource EnumToBoolConverter}, ConverterParameter={x:Static Common:ABISetting.Auto}}"
                                        Visibility="{Binding Is64BitABIValid, Converter={StaticResource booleansToInverseVisibilityConverter2}}"
                                        Content="{Binding Path=LocaleModel.[STRING_AUTO], FallbackValue=Auto}"/>
              <Common:CustomRadioButton Grid.Column="1" Margin="16,0,0,0" FontSize="14" HorizontalAlignment="Left" Height="20"
                                        GroupName="Abi" Content="ARM"
                                        IsChecked="{Binding AbiValue, Mode=TwoWay, Converter={StaticResource EnumToBoolConverter}, ConverterParameter={x:Static Common:ABISetting.ARM}}"
                                        Visibility="{Binding Is64BitABIValid, Converter={StaticResource booleansToInverseVisibilityConverter2}}"/>
              <StackPanel MouseEnter="CustomRadioButtonAuto_MouseEnter" MouseLeave="CustomRadioButtonAuto_MouseLeave"
                          x:Name="mAbi64AutoRadioButtonPanel" Grid.Column="0">
                <Common:CustomRadioButton x:Name="mAbi64AutoRadioButton" FontSize="14" Height="20" HorizontalAlignment="Left" GroupName="Abi"
                                          IsChecked="{Binding AbiValue, Mode=TwoWay, Converter={StaticResource EnumToBoolConverter}, ConverterParameter={x:Static Common:ABISetting.Auto64}}"
                                          Visibility="{Binding Is64BitABIValid, Converter={StaticResource booleanToVisibilityConverter}}"
                                          Content="{Binding Path=LocaleModel.[STRING_AUTO], FallbackValue=Auto}"
                                          IsEnabled="{Binding IsAbiSetttingEnabled}"/>
              </StackPanel>
              <StackPanel MouseEnter="CustomRadioButtonARM_MouseEnter" MouseLeave="CustomRadioButtonARM_MouseLeave"
                          x:Name="mAbi64ARMRadioButtonPanel" Grid.Column="1" Margin="16,0,0,0">
                <Common:CustomRadioButton x:Name="mAbi64ARMRadioButton" FontSize="14" HorizontalAlignment="Left" Height="20" GroupName="Abi"
                                          Content="ARM64"
                                          IsChecked="{Binding AbiValue, Mode=TwoWay, Converter={StaticResource EnumToBoolConverter}, ConverterParameter={x:Static Common:ABISetting.ARM64}}"
                                          Visibility="{Binding Is64BitABIValid, Converter={StaticResource booleanToVisibilityConverter}}"
                                          IsEnabled="{Binding IsAbiSetttingEnabled}"/>
              </StackPanel>
              <Common:CustomRadioButton Grid.Column="2" Margin="16,0,0,0" FontSize="14" HorizontalAlignment="Left" Height="20"
                                        GroupName="Abi"
                                        IsChecked="{Binding AbiValue, Mode=TwoWay, Converter={StaticResource EnumToBoolConverter}, ConverterParameter={x:Static Common:ABISetting.Custom}}"
                                        Visibility="{Binding IsCustomABI, Converter={StaticResource booleanToVisibilityConverter}}"
                                        Content="{Binding Path=LocaleModel.[STRING_CUSTOM1], FallbackValue=Custom}"/>
            </Grid>
          </Grid>
          <Grid Margin="0,16,0,0">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <TextBlock Width="100" VerticalAlignment="Center" TextAlignment="Right" TextWrapping="WrapWithOverflow"
                       FontSize="14" Text="{Binding Path=LocaleModel.[STRING_DPI], FallbackValue=DPI}"
                       Foreground="{Binding Path=ColorModel.[ContextMenuItemForegroundColor]}"/>
            <Grid Margin="24,0,0,0" Column="1" VerticalAlignment="Center">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Common:CustomRadioButton Grid.Column="0" FontSize="14" Height="20" HorizontalAlignment="Left" GroupName="Dpi" Content="160"
                                        IsChecked="{Binding Dpi, Mode=TwoWay, Converter={StaticResource EnumToBoolConverter}, ConverterParameter={x:Static Common:DisplaySettingConstants.Dpi160}}"/>
              <Common:CustomRadioButton Grid.Column="1" Margin="16,0,0,0" FontSize="14" HorizontalAlignment="Left" Height="20"
                                        GroupName="Dpi" Content="240"
                                        IsChecked="{Binding Dpi, Mode=TwoWay, Converter={StaticResource EnumToBoolConverter}, ConverterParameter={x:Static Common:DisplaySettingConstants.Dpi240}}"/>
              <Common:CustomRadioButton Grid.Column="2" Margin="16,0,0,0" FontSize="14" HorizontalAlignment="Left" Height="20"
                                        GroupName="Dpi" Content="320"
                                        IsChecked="{Binding Dpi, Mode=TwoWay, Converter={StaticResource EnumToBoolConverter}, ConverterParameter={x:Static Common:DisplaySettingConstants.Dpi320}}"/>
            </Grid>
          </Grid>
        </StackPanel>
      </Border>
      <Grid Margin="0,16,0,16" Row="2">
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
          <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" IsEnabled="{Binding IsAndroidDownloaded}">
            <TextBlock VerticalAlignment="Center" FontSize="14"
                       Text="{Binding Path=LocaleModel.[STRING_INSTANCE_COUNT], FallbackValue='Instance count'}"
                       Foreground="{Binding Path=ColorModel.[ContextMenuItemForegroundColor]}"/>
            <Common:CustomComboBox Margin="16,0,0,0" Height="32" Width="56" FontSize="14" MaxDropDownHeight="100"
                                   VerticalAlignment="Center" IsEnabled="{Binding IsAndroidDownloaded}"
                                   ItemsSource="{Binding InstanceCountList}" SelectedValue="{Binding InstanceCount, Mode=TwoWay}"/>
            <FrameworkElement.Style>
              <Style TargetType="{x:Type StackPanel}">
                <Style.Triggers>
                  <Trigger Property="UIElement.IsEnabled" Value="false">
                    <Setter Property="UIElement.Opacity" Value="0.4"/>
                  </Trigger>
                </Style.Triggers>
              </Style>
            </FrameworkElement.Style>
          </StackPanel>
          <Common:CustomButton Margin="16,0,0,0" Height="32" MinWidth="107" VerticalAlignment="Center" ButtonColor="Blue"
                               Content="{Binding Path=LocaleModel.[STRING_CREATE], FallbackValue=Create}">
            <UIElement.IsEnabled>
              <MultiBinding Converter="{StaticResource BooleansToInverseBooleanConverter}">
                <Binding ElementName="CustomResolutionWidth" Path="(Validation.HasError)"/>
                <Binding ElementName="CustomResolutionHeight" Path="(Validation.HasError)"/>
                <Binding ElementName="CustomRam" Path="(Validation.HasError)"/>
                <Binding Path="SelectedCPU" Converter="{StaticResource NullToBooleanConverter}"/>
                <Binding Path="SelectedRAM" Converter="{StaticResource NullToBooleanConverter}"/>
              </MultiBinding>
            </UIElement.IsEnabled>
            <i:Interaction.Triggers>
              <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                <command:EventToCommand Command="{Binding Path=CreateInstanceButtonClickCommand}"/>
              </i:EventTrigger>
            </i:Interaction.Triggers>
          </Common:CustomButton>
        </StackPanel>
      </Grid>
      <Common:CustomPopUp x:Name="mDisabledAbiPopup" StaysOpen="true" Placement="Top" VerticalOffset="-5"
                          Style="{StaticResource CenteredHorizontalOffsetStyle}" RenderOptions.EdgeMode="Aliased"
                          PopupAnimation="Fade" AllowsTransparency="true">
        <Border Style="{StaticResource ShadowBorder}" Width="200">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition Height="8"/>
            </Grid.RowDefinitions>
            <Border Style="{StaticResource OuterBorder}">
              <Grid>
                <UIElement.OpacityMask>
                  <VisualBrush Stretch="None" Visual="{Binding ElementName=mDisabledAbiPopupBorder}"/>
                </UIElement.OpacityMask>
                <Border x:Name="mDisabledAbiPopupBorder" Style="{StaticResource MaskBorder}"/>
                <TextBlock Margin="9" FontSize="12" VerticalAlignment="Center" TextWrapping="Wrap"
                           Text="{Binding AbiSettingDisabledTooltip}"
                           Foreground="{Binding Path=ColorModel.[SettingsWindowForegroundDimColor]}"/>
              </Grid>
            </Border>
            <Path Data="M 0,0 L 6,8 12,0 " Grid.Row="1" Margin="93,0,0,0" VerticalAlignment="Center"
                  Stroke="{Binding ColorModel.[PopupBorderBrush]}"
                  Fill="{Binding ColorModel.[ContextMenuItemBackgroundColor]}"/>
          </Grid>
        </Border>
      </Common:CustomPopUp>
    </Grid>
  </Border>
</bluestacksCore:UiWindowBase>