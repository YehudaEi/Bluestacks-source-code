<local:XTextBox x:Class="BlueStacks.Common.CustomTextBox"
                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                xmlns:local="clr-namespace:BlueStacks.Common"
                x:Name="mTextBox" Style="{DynamicResource TextBoxStyle}">
  <FrameworkElement.Resources>
    <Style x:Key="CenteredHorizontalOffsetStyle" TargetType="{x:Type Popup}">
      <Setter Property="Popup.HorizontalOffset">
        <Setter.Value>
          <MultiBinding Converter="{local:CenterToolTipConverter}">
            <Binding Path="PlacementTarget.ActualWidth" RelativeSource="{RelativeSource Self}"/>
            <Binding Path="Child.ActualWidth" RelativeSource="{RelativeSource Self}"/>
          </MultiBinding>
        </Setter.Value>
      </Setter>
      <Setter Property="Popup.VerticalOffset">
        <Setter.Value>
          <MultiBinding Converter="{local:CenterToolTipConverter}">
            <Binding Path="PlacementTarget.ActualHeight" RelativeSource="{RelativeSource Self}"/>
            <Binding Path="Child.ActualHeight" RelativeSource="{RelativeSource Self}"/>
          </MultiBinding>
        </Setter.Value>
      </Setter>
    </Style>
    <Style x:Key="TextBoxStyle" TargetType="{x:Type local:XTextBox}">
      <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
      <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
      <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
      <Setter Property="UIElement.AllowDrop" Value="true"/>
      <Setter Property="Control.BorderThickness" Value="1,1,1.2,1"/>
      <Setter Property="Control.Padding" Value="2"/>
      <Setter Property="Control.FontSize" Value="14"/>
      <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
      <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
      <Setter Property="Control.Foreground"
              Value="{Binding Path=ColorModel.[TextBoxForegroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"/>
      <Setter Property="Control.Background"
              Value="{Binding Path=ColorModel.[TextBoxBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"/>
      <Setter Property="Control.BorderBrush"
              Value="{Binding Path=ColorModel.[TextBoxBorderColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"/>
      <Setter Property="Validation.ErrorTemplate">
        <Setter.Value>
          <ControlTemplate>
            <Grid>
              <AdornedElementPlaceholder x:Name="placeholder"/>
              <local:CustomPopUp AllowsTransparency="true" Placement="Top" Style="{StaticResource CenteredHorizontalOffsetStyle}"
                                 VerticalOffset="0" PlacementTarget="{Binding ElementName=placeholder}"
                                 IsOpen="{Binding ElementName=placeholder, Path=AdornedElement.IsKeyboardFocused, Mode=OneWay}">
                <Border Style="{StaticResource ShadowBorderForPopup}">
                  <Grid>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto"/>
                      <RowDefinition Height="10"/>
                    </Grid.RowDefinitions>
                    <Border Style="{StaticResource OuterBorder}"
                            BorderBrush="{Binding Path=ColorModel.[RedMouseOutGridBackGround], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                            Background="{Binding Path=ColorModel.[ComboBoxBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}">
                      <Grid>
                        <UIElement.OpacityMask>
                          <VisualBrush Stretch="None" Visual="{Binding ElementName=mMaskBorder}"/>
                        </UIElement.OpacityMask>
                        <Border x:Name="mMaskBorder" Style="{StaticResource MaskBorder}"
                                Background="{Binding Path=ColorModel.[ComboBoxBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"/>
                        <Grid Margin="7,5,7,5">
                          <TextBlock HorizontalAlignment="Center"
                                     Foreground="{Binding Path=ColorModel.[ContextMenuItemForegroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                                     Text="{Binding ElementName=placeholder, Path=AdornedElement.(Validation.Errors)[0].ErrorContent, Mode=OneWay}"/>
                        </Grid>
                      </Grid>
                    </Border>
                    <Grid Row="1">
                      <Path x:Name="mDownArrow" Data="M 0,0 L 8,10 16,0 " Margin="0,-1,0,0" HorizontalAlignment="Center"
                            Fill="{Binding Path=ColorModel.[ComboBoxBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                            Stroke="{Binding Path=ColorModel.[RedMouseOutGridBackGround], Source={x:Static local:BlueStacksUIBinding.Instance}}"/>
                    </Grid>
                  </Grid>
                </Border>
              </local:CustomPopUp>
            </Grid>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
      <Setter Property="Control.Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type local:CustomTextBox}">
            <Border x:Name="Border" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    Background="{TemplateBinding Control.Background}">
              <ScrollViewer x:Name="PART_ContentHost" Margin="0"/>
            </Border>
            <ControlTemplate.Triggers>
              <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter TargetName="Border"
                        Value="{Binding Path=ColorModel.[TextBoxHoverBorderColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                        Property="Border.BorderBrush"/>
              </Trigger>
              <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                <Setter TargetName="Border"
                        Value="{Binding Path=ColorModel.[TextBoxFocussedBorderColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="Border"
                        Value="{Binding Path=ColorModel.[TextBoxFocussedBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                        Property="Border.Background"/>
                <Setter Value="{Binding Path=ColorModel.[TextBoxFocussedBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                        Property="Control.Background"/>
                <Setter Value="{Binding Path=ColorModel.[TextBoxFocussedForegroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                        Property="Control.Foreground"/>
              </Trigger>
              <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="Border" Property="UIElement.Opacity" Value="0.6"/>
                <Setter Property="UIElement.Opacity" Value="0.6"/>
              </Trigger>
              <Trigger Property="local:XTextBox.InputTextValidity" Value="Error">
                <Setter TargetName="Border"
                        Value="{Binding Path=ColorModel.[TextBoxErrorBorderColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="Border"
                        Value="{Binding Path=ColorModel.[TextBoxErrorBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                        Property="Border.Background"/>
                <Setter Value="{Binding Path=ColorModel.[TextBoxErrorBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                        Property="Control.Background"/>
              </Trigger>
              <Trigger Property="local:XTextBox.InputTextValidity" Value="Warning">
                <Setter TargetName="Border"
                        Value="{Binding Path=ColorModel.[TextBoxWarningBorderColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                        Property="Border.BorderBrush"/>
                <Setter TargetName="Border"
                        Value="{Binding Path=ColorModel.[TextBoxWarningBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                        Property="Border.Background"/>
                <Setter Value="{Binding Path=ColorModel.[TextBoxWarningBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                        Property="Control.Background"/>
              </Trigger>
              <MultiTrigger>
                <MultiTrigger.Conditions>
                  <Condition Property="local:XTextBox.ErrorIfNullOrEmpty" Value="true"/>
                  <Condition Property="TextBox.Text" Value=""/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                  <Setter Property="local:XTextBox.InputTextValidity" Value="Error"/>
                </MultiTrigger.Setters>
              </MultiTrigger>
              <MultiTrigger>
                <MultiTrigger.Conditions>
                  <Condition Property="local:XTextBox.ErrorIfNullOrEmpty" Value="true"/>
                  <Condition Value="{x:Null}" Property="TextBox.Text"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                  <Setter Property="local:XTextBox.InputTextValidity" Value="Error"/>
                </MultiTrigger.Setters>
              </MultiTrigger>
              <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="local:XTextBox.InputTextValidity" Value="Error"/>
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
      <Style.Triggers>
        <Trigger Property="TextBoxBase.IsReadOnly" Value="true">
          <Setter Property="Control.Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type TextBox}">
                <TextBlock x:Name="mTextBlock" Text="{TemplateBinding TextBox.Text}" TextTrimming="CharacterEllipsis"
                           VerticalAlignment="Center" Width="{TemplateBinding FrameworkElement.Width}"
                           Foreground="{Binding Path=ColorModel.[TextBoxFocussedForegroundColor]}"
                           ToolTip="{Binding RelativeSource={RelativeSource self}, Path=Text}"/>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Trigger>
      </Style.Triggers>
    </Style>
  </FrameworkElement.Resources>
</local:XTextBox>