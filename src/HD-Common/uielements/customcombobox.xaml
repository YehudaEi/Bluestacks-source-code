<ComboBox x:Class="BlueStacks.Common.CustomComboBox"
          xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
          xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
          xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
          xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
          xmlns:local="clr-namespace:BlueStacks.Common"
          xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
          Style="{DynamicResource ComboBoxStyle1}" ItemContainerStyle="{DynamicResource comboboxitemstyle}">
  <FrameworkElement.Resources>
    <Style x:Key="ComboBoxFocusVisual">
      <Setter Property="Control.Template">
        <Setter.Value>
          <ControlTemplate>
            <Rectangle Margin="4,4,21,4" SnapsToDevicePixels="true" StrokeThickness="1" StrokeDashArray="1 2"
                       Stroke="{Binding Path=ColorModel.[ComboBoxItemBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"/>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <Geometry x:Key="DownArrowGeometry">M 0 0 L 4 5 L 8 0 Z</Geometry>
    <Style x:Key="ComboBoxReadonlyToggleButton" TargetType="{x:Type ToggleButton}">
      <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
      <Setter Property="Control.IsTabStop" Value="false"/>
      <Setter Property="UIElement.Focusable" Value="false"/>
      <Setter Property="ButtonBase.ClickMode" Value="Press"/>
      <Setter Property="Control.Background" Value="Transparent"/>
      <Setter Property="Control.Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type ToggleButton}">
            <Border x:Name="Chrome" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true"
                    Background="{Binding Path=ColorModel.[ComboBoxBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}">
              <Grid HorizontalAlignment="Right">
                <Path x:Name="Arrow" Data="{StaticResource DownArrowGeometry}" HorizontalAlignment="Center"
                      Margin="3,1,12,0" VerticalAlignment="Center"
                      Fill="{Binding Path=ColorModel.[ComboBoxForegroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"/>
              </Grid>
            </Border>
            <ControlTemplate.Triggers>
              <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="Arrow" Property="Shape.Fill" Value="#AFAFAF"/>
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
      <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
      <Setter Property="UIElement.AllowDrop" Value="true"/>
      <Setter Property="FrameworkElement.MinWidth" Value="0"/>
      <Setter Property="FrameworkElement.MinHeight" Value="0"/>
      <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
      <Setter Property="Control.Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type TextBox}">
            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden"
                          VerticalScrollBarVisibility="Hidden"
                          Background="{Binding Path=ColorModel.[ComboBoxBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"/>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
      <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
      <Setter Property="Control.IsTabStop" Value="false"/>
      <Setter Property="UIElement.Focusable" Value="false"/>
      <Setter Property="ButtonBase.ClickMode" Value="Press"/>
      <Setter Property="Control.Background" Value="Transparent"/>
      <Setter Property="Control.Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type ToggleButton}">
            <Border x:Name="Chrome" BorderThickness="0" SnapsToDevicePixels="true"
                    BorderBrush="{Binding Path=ColorModel.[ComboBoxBorderColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                    Background="{Binding Path=ColorModel.[ComboBoxBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}">
              <Grid HorizontalAlignment="Right">
                <Path x:Name="Arrow" Data="{StaticResource DownArrowGeometry}" HorizontalAlignment="Center"
                      Margin="3,1,12,0" VerticalAlignment="Center"
                      Fill="{Binding Path=ColorModel.[ComboBoxForegroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"/>
              </Grid>
            </Border>
            <ControlTemplate.Triggers>
              <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="Arrow" Property="Shape.Fill" Value="#AFAFAF"/>
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
      <Border BorderThickness="1"
              BorderBrush="{Binding Path=ColorModel.[ComboBoxBorderColor], Source={x:Static local:BlueStacksUIBinding.Instance}}">
        <Grid x:Name="Placement" SnapsToDevicePixels="true">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
          </Grid.ColumnDefinitions>
          <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2"
                 PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                 Placement="Bottom"
                 IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
            <Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent"
                                           FrameworkElement.MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                                           FrameworkElement.MinWidth="{Binding ActualWidth, ElementName=Placement}">
              <Border x:Name="DropDownBorder" BorderThickness="1"
                      BorderBrush="{Binding Path=ColorModel.[ComboBoxBorderColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                      Background="{Binding Path=ColorModel.[ComboBoxBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}">
                <ScrollViewer>
                  <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                </ScrollViewer>
              </Border>
            </Themes:SystemDropShadowChrome>
          </Popup>
          <Themes:ListBoxChrome x:Name="Border" BorderThickness="0" Grid.ColumnSpan="2"
                                RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}"
                                RenderFocused="{TemplateBinding UIElement.IsKeyboardFocusWithin}"
                                BorderBrush="{Binding Path=ColorModel.[ComboBoxBorderColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                                Background="{Binding Path=ColorModel.[ComboBoxBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"/>
          <TextBox x:Name="PART_EditableTextBox"
                   HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                   Margin="{TemplateBinding Control.Padding}" Style="{StaticResource ComboBoxEditableTextBox}"
                   VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                   IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"/>
          <ToggleButton Visibility="Collapsed" BorderBrush="{TemplateBinding Control.BorderBrush}"
                        Background="{TemplateBinding Control.Background}" Grid.Column="1"
                        Style="{StaticResource ComboBoxToggleButton}"
                        IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
        </Grid>
      </Border>
      <ControlTemplate.Triggers>
        <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="true">
          <Setter Value="{Binding Path=ColorModel.[ComboBoxForegroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                  Property="Control.Foreground"/>
        </Trigger>
        <Trigger Property="ComboBox.IsDropDownOpen" Value="true">
          <Setter TargetName="Border" Property="Themes:ListBoxChrome.RenderFocused" Value="true"/>
        </Trigger>
        <Trigger Property="ItemsControl.HasItems" Value="false">
          <Setter TargetName="DropDownBorder" Property="FrameworkElement.Height" Value="95"/>
        </Trigger>
        <Trigger Property="UIElement.IsEnabled" Value="false">
          <Setter Value="{Binding Path=ColorModel.[ComboBoxForegroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                  Property="Control.Foreground"/>
          <Setter Value="{Binding Path=ColorModel.[ComboBoxBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                  Property="Control.Background"/>
        </Trigger>
        <Trigger Property="ItemsControl.IsGrouping" Value="true">
          <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
          <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
          <Setter TargetName="Shdw" Property="Themes:SystemDropShadowChrome.Color" Value="#000000"/>
        </Trigger>
      </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ComboBoxStyle1" TargetType="{x:Type local:CustomComboBox}">
      <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource ComboBoxFocusVisual}"/>
      <Setter Property="Control.Foreground"
              Value="{Binding Path=ColorModel.[ComboBoxForegroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"/>
      <Setter Property="Control.Background"
              Value="{Binding Path=ColorModel.[ComboBoxBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"/>
      <Setter Property="Control.BorderThickness" Value="1"/>
      <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
      <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
      <Setter Property="Control.Padding" Value="4,3"/>
      <Setter Property="local:CustomComboBox.SetToolTip"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver, Mode=OneWay}"/>
      <Setter Property="FrameworkElement.ToolTip"
              Value="{Binding Path=SelectedItem.ToolTip, RelativeSource={RelativeSource Self}}"/>
      <Setter Property="Control.Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type local:CustomComboBox}">
            <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
              </Grid.ColumnDefinitions>
              <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" Margin="1"
                     PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                     Placement="Bottom"
                     IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent"
                                               FrameworkElement.MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                                               FrameworkElement.MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
                  <Border x:Name="DropDownBorder" BorderThickness="1,0,1,1"
                          BorderBrush="{Binding Path=ColorModel.[ComboBoxBorderColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                          Background="{Binding Path=ColorModel.[ComboBoxBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}">
                    <ScrollViewer CanContentScroll="true" HorizontalScrollBarVisibility="Disabled"
                                  Template="{DynamicResource ScrollViewerControlTemplate1}">
                      <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" Margin="-1,0,-1,0"
                                      MaxWidth="{TemplateBinding FrameworkElement.Width}"
                                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                    </ScrollViewer>
                  </Border>
                </Themes:SystemDropShadowChrome>
              </Popup>
              <ToggleButton x:Name="TglBtn" Background="{TemplateBinding Control.Background}" Grid.ColumnSpan="2"
                            BorderThickness="1" Style="{StaticResource ComboBoxReadonlyToggleButton}"
                            BorderBrush="{Binding Path=ColorModel.[ComboBoxBorderColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
              <ContentPresenter ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                                Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                                ContentStringFormat="{TemplateBinding ComboBox.SelectionBoxItemStringFormat}"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" IsHitTestVisible="false"
                                Margin="8,4,8,4" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                VerticalAlignment="Center"/>
            </Grid>
            <ControlTemplate.Triggers>
              <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,0,0"/>
                <Setter TargetName="Shdw" Property="Themes:SystemDropShadowChrome.Color" Value="#71000000"/>
              </Trigger>
              <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="DropDownBorder" Property="FrameworkElement.Height" Value="95"/>
              </Trigger>
              <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Value="{Binding Path=ColorModel.[ComboBoxForegroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                        Property="Control.Foreground"/>
                <Setter Value="{Binding Path=ColorModel.[ComboBoxBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                        Property="Control.Background"/>
              </Trigger>
              <Trigger Property="ItemsControl.IsGrouping" Value="true">
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
              </Trigger>
              <Trigger Property="Control.BorderBrush" Value="Red">
                <Setter TargetName="TglBtn" Property="Control.BorderBrush" Value="#FF402F"/>
              </Trigger>
              <Trigger Property="local:CustomComboBox.Highlight" Value="true">
                <Setter TargetName="TglBtn"
                        Value="{Binding Path=ColorModel.[SettingsWindowTabMenuItemUnderline], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                        Property="Control.BorderBrush"/>
                <Setter TargetName="TglBtn" Property="Control.BorderThickness" Value="2"/>
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
      <Style.Triggers>
        <Trigger Property="ComboBox.IsEditable" Value="true">
          <Setter Property="Control.BorderBrush"
                  Value="{Binding Path=ColorModel.[ComboBoxBorderColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"/>
          <Setter Property="Control.Background"
                  Value="{Binding Path=ColorModel.[ComboBoxBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"/>
          <Setter Property="Control.IsTabStop" Value="false"/>
          <Setter Property="Control.Padding" Value="3"/>
          <Setter Property="Control.Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
        </Trigger>
      </Style.Triggers>
    </Style>
    <Style x:Key="comboboxitemstyle" TargetType="{x:Type ComboBoxItem}">
      <Setter Property="Control.HorizontalContentAlignment"
              Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
      <Setter Property="Control.VerticalContentAlignment"
              Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
      <Setter Property="Control.Padding" Value="3,0,3,0"/>
      <Setter Property="Control.Foreground"
              Value="{Binding Path=ColorModel.[ComboBoxForegroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"/>
      <Setter Property="Control.Background"
              Value="{Binding Path=ColorModel.[ComboBoxBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"/>
      <Setter Property="FrameworkElement.MaxWidth"
              Value="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"/>
      <Setter Property="FrameworkElement.MinWidth"
              Value="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"/>
      <Setter Property="FrameworkElement.MaxHeight"
              Value="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"/>
      <Setter Property="FrameworkElement.MinHeight"
              Value="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"/>
      <Setter Property="Control.Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type ComboBoxItem}">
            <Border x:Name="Bd" Background="Transparent" Padding="{TemplateBinding Control.Padding}"
                    SnapsToDevicePixels="true"
                    BorderBrush="{Binding Path=ColorModel.[ComboBoxBorderColor], Source={x:Static local:BlueStacksUIBinding.Instance}}">
              <ContentPresenter x:Name="mContentPresenter" Margin="4,4,4,4"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center"/>
            </Border>
            <ControlTemplate.Triggers>
              <Trigger Property="ComboBoxItem.IsHighlighted" Value="true">
                <Setter TargetName="Bd"
                        Value="{Binding Path=ColorModel.[ComboBoxItemBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                        Property="Border.Background"/>
                <Setter Value="{Binding Path=ColorModel.[ComboBoxForegroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                        Property="Control.Foreground"/>
              </Trigger>
              <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter Value="{Binding Path=ColorModel.[ComboBoxForegroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"
                        Property="Control.Foreground"/>
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <ControlTemplate x:Key="ScrollViewerControlTemplate1" TargetType="{x:Type ScrollViewer}">
      <Grid x:Name="Grid" Background="{TemplateBinding Control.Background}">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
          <RowDefinition Height="*"/>
          <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Rectangle x:Name="Corner" Grid.Column="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                   Grid.Row="1"/>
        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" CanHorizontallyScroll="false"
                                CanVerticallyScroll="false" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                Content="{TemplateBinding ContentControl.Content}" Grid.Column="0"
                                Margin="{TemplateBinding Control.Padding}" Grid.Row="0"/>
        <ScrollBar x:Name="PART_VerticalScrollBar" HorizontalAlignment="Right"
                   AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1"
                   Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" Minimum="0" Grid.Row="0"
                   Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
                   ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                   Style="{DynamicResource ScrollBarStyle1}"
                   Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}">
          <FrameworkElement.Resources>
            <SolidColorBrush x:Key="ScrollBarDisabledBackground"
                             Color="{Binding Path=ColorModel.[ComboBoxItemBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"/>
            <Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
              <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
              <Setter Property="UIElement.Focusable" Value="false"/>
              <Setter Property="Control.IsTabStop" Value="false"/>
              <Setter Property="Control.Template">
                <Setter.Value>
                  <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Themes:ScrollChrome x:Name="Chrome" RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}"
                                         RenderPressed="{TemplateBinding ButtonBase.IsPressed}" UIElement.SnapsToDevicePixels="true"
                                         ScrollGlyph="{TemplateBinding Themes:ScrollChrome.ScrollGlyph}"/>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
            <Style x:Key="VerticalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
              <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
              <Setter Property="Control.Background" Value="Transparent"/>
              <Setter Property="UIElement.Focusable" Value="false"/>
              <Setter Property="Control.IsTabStop" Value="false"/>
              <Setter Property="Control.Template">
                <Setter.Value>
                  <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Control.Background}" Height="{TemplateBinding FrameworkElement.Height}"
                               Width="{TemplateBinding FrameworkElement.Width}"/>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
            <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
              <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
              <Setter Property="Control.IsTabStop" Value="false"/>
              <Setter Property="Control.Template">
                <Setter.Value>
                  <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid Width="8" HorizontalAlignment="Right"
                          Background="{Binding Path=ColorModel.[ComboBoxScrollBarColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"/>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
            <Style x:Key="HorizontalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
              <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
              <Setter Property="Control.Background" Value="Transparent"/>
              <Setter Property="UIElement.Focusable" Value="false"/>
              <Setter Property="Control.IsTabStop" Value="false"/>
              <Setter Property="Control.Template">
                <Setter.Value>
                  <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Control.Background}" Height="{TemplateBinding FrameworkElement.Height}"
                               Width="{TemplateBinding FrameworkElement.Width}"/>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
            <Style x:Key="ScrollBarStyle1" TargetType="{x:Type ScrollBar}">
              <Setter Property="Control.Background"
                      Value="{Binding Path=ColorModel.[ComboBoxVerticalScrollBarBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"/>
              <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
              <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
              <Setter Property="Control.Foreground"
                      Value="{Binding Path=ColorModel.[ComboBoxForegroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"/>
              <Setter Property="FrameworkElement.Width"
                      Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
              <Setter Property="FrameworkElement.MinWidth"
                      Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
              <Setter Property="Control.Template">
                <Setter.Value>
                  <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" Background="Transparent" SnapsToDevicePixels="true">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="0.00001*"/>
                      </Grid.RowDefinitions>
                      <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding UIElement.IsMouseOver}"
                             Grid.Row="1">
                        <Track.DecreaseRepeatButton>
                          <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource VerticalScrollBarPageButton}"/>
                        </Track.DecreaseRepeatButton>
                        <Track.IncreaseRepeatButton>
                          <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource VerticalScrollBarPageButton}"/>
                        </Track.IncreaseRepeatButton>
                        <Track.Thumb>
                          <Thumb Style="{StaticResource ScrollBarThumb}" ScrollGlyph="VerticalGripper"/>
                        </Track.Thumb>
                      </Track>
                    </Grid>
                    <ControlTemplate.Triggers>
                      <Trigger Property="UIElement.IsEnabled" Value="false">
                        <Setter TargetName="Bg" Value="{StaticResource ScrollBarDisabledBackground}" Property="Panel.Background"/>
                      </Trigger>
                    </ControlTemplate.Triggers>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
              <Style.Triggers>
                <Trigger Property="ScrollBar.Orientation" Value="Horizontal">
                  <Setter Property="FrameworkElement.Width" Value="Auto"/>
                  <Setter Property="FrameworkElement.MinWidth" Value="0"/>
                  <Setter Property="FrameworkElement.Height"
                          Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                  <Setter Property="FrameworkElement.MinHeight"
                          Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                  <Setter Property="Control.Background"
                          Value="{Binding Path=ColorModel.[ComboBoxHorizontalScrollBarBackgroundColor], Source={x:Static local:BlueStacksUIBinding.Instance}}"/>
                  <Setter Property="Control.Template">
                    <Setter.Value>
                      <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Grid x:Name="Bg" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                            <ColumnDefinition Width="0.00001*"/>
                            <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                          </Grid.ColumnDefinitions>
                          <RepeatButton Command="{x:Static ScrollBar.LineLeftCommand}" IsEnabled="{TemplateBinding UIElement.IsMouseOver}"
                                        Style="{StaticResource ScrollBarButton}" ScrollGlyph="LeftArrow"/>
                          <Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding UIElement.IsMouseOver}">
                            <Track.DecreaseRepeatButton>
                              <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}"
                                            Style="{StaticResource HorizontalScrollBarPageButton}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                              <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}"
                                            Style="{StaticResource HorizontalScrollBarPageButton}"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                              <Thumb Style="{StaticResource ScrollBarThumb}" ScrollGlyph="HorizontalGripper"/>
                            </Track.Thumb>
                          </Track>
                          <RepeatButton Grid.Column="2" Command="{x:Static ScrollBar.LineRightCommand}"
                                        IsEnabled="{TemplateBinding UIElement.IsMouseOver}" Style="{StaticResource ScrollBarButton}"
                                        ScrollGlyph="RightArrow"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                          <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter TargetName="Bg" Value="{StaticResource ScrollBarDisabledBackground}" Property="Panel.Background"/>
                          </Trigger>
                        </ControlTemplate.Triggers>
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </Trigger>
              </Style.Triggers>
            </Style>
          </FrameworkElement.Resources>
        </ScrollBar>
        <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar"
                   Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" Minimum="0"
                   Orientation="Horizontal" Grid.Row="1"
                   Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                   ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                   Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
      </Grid>
    </ControlTemplate>
  </FrameworkElement.Resources>
</ComboBox>