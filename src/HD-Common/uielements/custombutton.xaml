<Button x:Class="BlueStacks.Common.CustomButton"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:local="clr-namespace:BlueStacks.Common"
        PreviewMouseDown="Button_PreviewMouseDown" PreviewMouseUp="Button_PreviewMouseUp" x:Name="mButton"
        Style="{DynamicResource ButtonStyle}" Content="Hello World">
  <FrameworkElement.Resources>
    <local:ButtonColorMultiConverter x:Key="ButtonColorMultiConverter"/>
    <local:ButtonCornerRadiusMultiConverter x:Key="ButtonCornerRadiusMultiConverter"/>
    <local:ButtonImageNameToVisibilityConverter x:Key="ButtonImageNameToVisibilityConverter"/>
    <local:ButtonImageStateConverter x:Key="ButtonImageStateConverter"/>
    <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
      <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
      <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
      <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
      <Setter Property="Control.BorderThickness" Value="1"/>
      <Setter Property="Control.Padding" Value="10,0,10,0"/>
      <Setter Property="Control.FontSize" Value="16"/>
      <Setter Property="Control.FontWeight" Value="SemiBold"/>
      <Setter Property="FrameworkElement.Height" Value="35"/>
      <Setter Property="FrameworkElement.ToolTip"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=Content}"/>
      <Setter Property="Control.Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type local:CustomButton}">
            <Border x:Name="Border" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Padding="{TemplateBinding Control.Padding}">
              <Border.BorderBrush>
                <MultiBinding Converter="{StaticResource ButtonColorMultiConverter}"
                              ConverterParameter="{x:Static local:ButtonColorType.MouseOut_BorderBackground}">
                  <Binding Path="ButtonColor" RelativeSource="{RelativeSource TemplatedParent}"/>
                  <Binding Path="ColorModel" Source="{x:Static local:BlueStacksUIBinding.Instance}"/>
                </MultiBinding>
              </Border.BorderBrush>
              <Border.Background>
                <MultiBinding Converter="{StaticResource ButtonColorMultiConverter}"
                              ConverterParameter="{x:Static local:ButtonColorType.MouseOut_GridBackGround}">
                  <Binding Path="ButtonColor" RelativeSource="{RelativeSource TemplatedParent}"/>
                  <Binding Path="ColorModel" Source="{x:Static local:BlueStacksUIBinding.Instance}"/>
                </MultiBinding>
              </Border.Background>
              <TextBlock.Foreground>
                <MultiBinding Converter="{StaticResource ButtonColorMultiConverter}"
                              ConverterParameter="{x:Static local:ButtonColorType.MouseOut_ForeGround}">
                  <Binding Path="ButtonColor" RelativeSource="{RelativeSource TemplatedParent}"/>
                  <Binding Path="ColorModel" Source="{x:Static local:BlueStacksUIBinding.Instance}"/>
                </MultiBinding>
              </TextBlock.Foreground>
              <Border.CornerRadius>
                <MultiBinding Converter="{StaticResource ButtonCornerRadiusMultiConverter}">
                  <Binding Path="CornerRadiusModel.[ButtonCornerRadius]"
                           Source="{x:Static local:BlueStacksUIBinding.Instance}"/>
                  <Binding Path="ActualHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                </MultiBinding>
              </Border.CornerRadius>
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <local:CustomPictureBox x:Name="mButtonImage" Stretch="Uniform" VerticalAlignment="Center" HorizontalAlignment="Center"
                                        Grid.Column="0" Margin="{Binding ImageMargin, RelativeSource={RelativeSource TemplatedParent}}"
                                        Visibility="{Binding ImageName, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ButtonImageNameToVisibilityConverter}}"
                                        ImageName="{Binding ImageName, RelativeSource={RelativeSource TemplatedParent}}"/>
                <ContentPresenter Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="true">
                  <ContentPresenter.ContentTemplate>
                    <DataTemplate>
                      <TextBlock x:Name="buttonTextBlock" Margin="0,-2,0,0" TextTrimming="CharacterEllipsis" Text="{Binding}"/>
                    </DataTemplate>
                  </ContentPresenter.ContentTemplate>
                </ContentPresenter>
              </Grid>
            </Border>
            <ControlTemplate.Triggers>
              <Trigger Property="UIElement.IsEnabled" Value="false">
                <Setter TargetName="Border" Property="Border.BorderBrush">
                  <Setter.Value>
                    <MultiBinding Converter="{StaticResource ButtonColorMultiConverter}"
                                  ConverterParameter="{x:Static local:ButtonColorType.Disabled_BorderBackground}">
                      <Binding Path="ButtonColor" RelativeSource="{RelativeSource TemplatedParent}"/>
                      <Binding Path="ColorModel" Source="{x:Static local:BlueStacksUIBinding.Instance}"/>
                    </MultiBinding>
                  </Setter.Value>
                </Setter>
                <Setter TargetName="Border" Property="Border.Background">
                  <Setter.Value>
                    <MultiBinding Converter="{StaticResource ButtonColorMultiConverter}"
                                  ConverterParameter="{x:Static local:ButtonColorType.Disabled_GridBackGround}">
                      <Binding Path="ButtonColor" RelativeSource="{RelativeSource TemplatedParent}"/>
                      <Binding Path="ColorModel" Source="{x:Static local:BlueStacksUIBinding.Instance}"/>
                    </MultiBinding>
                  </Setter.Value>
                </Setter>
                <Setter TargetName="Border" Property="TextBlock.Foreground">
                  <Setter.Value>
                    <MultiBinding Converter="{StaticResource ButtonColorMultiConverter}"
                                  ConverterParameter="{x:Static local:ButtonColorType.Disabled_ForeGround}">
                      <Binding Path="ButtonColor" RelativeSource="{RelativeSource TemplatedParent}"/>
                      <Binding Path="ColorModel" Source="{x:Static local:BlueStacksUIBinding.Instance}"/>
                    </MultiBinding>
                  </Setter.Value>
                </Setter>
              </Trigger>
              <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Border.BorderBrush">
                  <Setter.Value>
                    <MultiBinding Converter="{StaticResource ButtonColorMultiConverter}"
                                  ConverterParameter="{x:Static local:ButtonColorType.MouseIn_BorderBackground}">
                      <Binding Path="ButtonColor" RelativeSource="{RelativeSource TemplatedParent}"/>
                      <Binding Path="ColorModel" Source="{x:Static local:BlueStacksUIBinding.Instance}"/>
                    </MultiBinding>
                  </Setter.Value>
                </Setter>
                <Setter TargetName="Border" Property="Border.Background">
                  <Setter.Value>
                    <MultiBinding Converter="{StaticResource ButtonColorMultiConverter}"
                                  ConverterParameter="{x:Static local:ButtonColorType.MouseIn_GridBackGround}">
                      <Binding Path="ButtonColor" RelativeSource="{RelativeSource TemplatedParent}"/>
                      <Binding Path="ColorModel" Source="{x:Static local:BlueStacksUIBinding.Instance}"/>
                    </MultiBinding>
                  </Setter.Value>
                </Setter>
                <Setter TargetName="Border" Property="TextBlock.Foreground">
                  <Setter.Value>
                    <MultiBinding Converter="{StaticResource ButtonColorMultiConverter}"
                                  ConverterParameter="{x:Static local:ButtonColorType.MouseIn_ForeGround}">
                      <Binding Path="ButtonColor" RelativeSource="{RelativeSource TemplatedParent}"/>
                      <Binding Path="ColorModel" Source="{x:Static local:BlueStacksUIBinding.Instance}"/>
                    </MultiBinding>
                  </Setter.Value>
                </Setter>
                <Setter TargetName="mButtonImage"
                        Value="{Binding ImageName, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ButtonImageStateConverter}, ConverterParameter={x:Static local:ButtonImageState.hover}}"
                        Property="local:CustomPictureBox.ImageName"/>
              </Trigger>
              <Trigger Property="local:CustomButton.IsMouseDown" Value="true">
                <Setter TargetName="Border" Property="Border.BorderBrush">
                  <Setter.Value>
                    <MultiBinding Converter="{StaticResource ButtonColorMultiConverter}"
                                  ConverterParameter="{x:Static local:ButtonColorType.MouseDown_BorderBackground}">
                      <Binding Path="ButtonColor" RelativeSource="{RelativeSource TemplatedParent}"/>
                      <Binding Path="ColorModel" Source="{x:Static local:BlueStacksUIBinding.Instance}"/>
                    </MultiBinding>
                  </Setter.Value>
                </Setter>
                <Setter TargetName="Border" Property="Border.Background">
                  <Setter.Value>
                    <MultiBinding Converter="{StaticResource ButtonColorMultiConverter}"
                                  ConverterParameter="{x:Static local:ButtonColorType.MouseDown_GridBackGround}">
                      <Binding Path="ButtonColor" RelativeSource="{RelativeSource TemplatedParent}"/>
                      <Binding Path="ColorModel" Source="{x:Static local:BlueStacksUIBinding.Instance}"/>
                    </MultiBinding>
                  </Setter.Value>
                </Setter>
                <Setter TargetName="Border" Property="TextBlock.Foreground">
                  <Setter.Value>
                    <MultiBinding Converter="{StaticResource ButtonColorMultiConverter}"
                                  ConverterParameter="{x:Static local:ButtonColorType.MouseDown_ForeGround}">
                      <Binding Path="ButtonColor" RelativeSource="{RelativeSource TemplatedParent}"/>
                      <Binding Path="ColorModel" Source="{x:Static local:BlueStacksUIBinding.Instance}"/>
                    </MultiBinding>
                  </Setter.Value>
                </Setter>
                <Setter TargetName="mButtonImage"
                        Value="{Binding ImageName, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ButtonImageStateConverter}, ConverterParameter={x:Static local:ButtonImageState.click}}"
                        Property="local:CustomPictureBox.ImageName"/>
              </Trigger>
              <Trigger Property="local:CustomButton.ImageOrder" Value="AfterText">
                <Setter TargetName="mButtonImage" Property="Grid.Column" Value="2"/>
              </Trigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
  </FrameworkElement.Resources>
</Button>