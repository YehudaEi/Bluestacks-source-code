// Decompiled with JetBrains decompiler
// Type: IMAPKeys
// Assembly: HD-Common, Version=4.250.0.1070, Culture=neutral, PublicKeyToken=null
// MVID: 7033AB66-5028-4A08-B35C-D9B2B424A68A
// Assembly location: C:\Program Files\BlueStacks\HD-Common.dll

using BlueStacks.Common;
using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Input;

public static class IMAPKeys
{
  public static readonly Dictionary<Key, string> mDictKeys = new Dictionary<Key, string>()
  {
    {
      Key.Tab,
      "Tab"
    },
    {
      Key.Return,
      "Enter"
    },
    {
      Key.Capital,
      "CapsLock"
    },
    {
      Key.Escape,
      "Esc"
    },
    {
      Key.Space,
      "Space"
    },
    {
      Key.Prior,
      "PgUp"
    },
    {
      Key.Next,
      "PgDn"
    },
    {
      Key.End,
      "End"
    },
    {
      Key.Home,
      "Home"
    },
    {
      Key.Left,
      "Left"
    },
    {
      Key.Up,
      "Up"
    },
    {
      Key.Right,
      "Right"
    },
    {
      Key.Down,
      "Down"
    },
    {
      Key.Snapshot,
      "PrtSc"
    },
    {
      Key.Insert,
      "Insert"
    },
    {
      Key.Delete,
      "Delete"
    },
    {
      Key.D0,
      "0"
    },
    {
      Key.D1,
      "1"
    },
    {
      Key.D2,
      "2"
    },
    {
      Key.D3,
      "3"
    },
    {
      Key.D4,
      "4"
    },
    {
      Key.D5,
      "5"
    },
    {
      Key.D6,
      "6"
    },
    {
      Key.D7,
      "7"
    },
    {
      Key.D8,
      "8"
    },
    {
      Key.D9,
      "9"
    },
    {
      Key.Q,
      "Q"
    },
    {
      Key.W,
      "W"
    },
    {
      Key.E,
      "E"
    },
    {
      Key.R,
      "R"
    },
    {
      Key.T,
      "T"
    },
    {
      Key.Y,
      "Y"
    },
    {
      Key.U,
      "U"
    },
    {
      Key.I,
      "I"
    },
    {
      Key.O,
      "O"
    },
    {
      Key.P,
      "P"
    },
    {
      Key.A,
      "A"
    },
    {
      Key.S,
      "S"
    },
    {
      Key.D,
      "D"
    },
    {
      Key.F,
      "F"
    },
    {
      Key.G,
      "G"
    },
    {
      Key.H,
      "H"
    },
    {
      Key.J,
      "J"
    },
    {
      Key.K,
      "K"
    },
    {
      Key.L,
      "L"
    },
    {
      Key.Z,
      "Z"
    },
    {
      Key.X,
      "X"
    },
    {
      Key.C,
      "C"
    },
    {
      Key.V,
      "V"
    },
    {
      Key.B,
      "B"
    },
    {
      Key.N,
      "N"
    },
    {
      Key.M,
      "M"
    },
    {
      Key.NumPad0,
      "Num0"
    },
    {
      Key.NumPad1,
      "Num1"
    },
    {
      Key.NumPad2,
      "Num2"
    },
    {
      Key.NumPad3,
      "Num3"
    },
    {
      Key.NumPad4,
      "Num4"
    },
    {
      Key.NumPad5,
      "Num5"
    },
    {
      Key.NumPad6,
      "Num6"
    },
    {
      Key.NumPad7,
      "Num7"
    },
    {
      Key.NumPad8,
      "Num8"
    },
    {
      Key.NumPad9,
      "Num9"
    },
    {
      Key.Add,
      "Add"
    },
    {
      Key.Subtract,
      "Sub"
    },
    {
      Key.Multiply,
      "Mul"
    },
    {
      Key.Divide,
      "Div"
    },
    {
      Key.F1,
      "F1"
    },
    {
      Key.F2,
      "F2"
    },
    {
      Key.F3,
      "F3"
    },
    {
      Key.F4,
      "F4"
    },
    {
      Key.F5,
      "F5"
    },
    {
      Key.F6,
      "F6"
    },
    {
      Key.F7,
      "F7"
    },
    {
      Key.F8,
      "F8"
    },
    {
      Key.F9,
      "F9"
    },
    {
      Key.F10,
      "F10"
    },
    {
      Key.F11,
      "F11"
    },
    {
      Key.F12,
      "F12"
    },
    {
      Key.F13,
      "F13"
    },
    {
      Key.F14,
      "F14"
    },
    {
      Key.F15,
      "F15"
    },
    {
      Key.F16,
      "F16"
    },
    {
      Key.F17,
      "F17"
    },
    {
      Key.F18,
      "F18"
    },
    {
      Key.F19,
      "F19"
    },
    {
      Key.F20,
      "F20"
    },
    {
      Key.F21,
      "F21"
    },
    {
      Key.F22,
      "F22"
    },
    {
      Key.F23,
      "F23"
    },
    {
      Key.F24,
      "F24"
    },
    {
      Key.NumLock,
      "NumLock"
    },
    {
      Key.Scroll,
      "ScrlLock"
    },
    {
      Key.LeftShift,
      "Shift"
    },
    {
      Key.RightShift,
      "Shift"
    },
    {
      Key.LeftCtrl,
      "Ctrl"
    },
    {
      Key.RightCtrl,
      "Ctrl"
    },
    {
      Key.LeftAlt,
      "Alt"
    },
    {
      Key.RightAlt,
      "Alt"
    },
    {
      Key.Oem1,
      "Oem1"
    },
    {
      Key.OemPlus,
      "OemPlus"
    },
    {
      Key.OemComma,
      "OemComma"
    },
    {
      Key.OemMinus,
      "OemMinus"
    },
    {
      Key.OemPeriod,
      "OemPeriod"
    },
    {
      Key.Oem2,
      "Oem2"
    },
    {
      Key.Oem3,
      "Oem3"
    },
    {
      Key.Oem4,
      "Oem4"
    },
    {
      Key.Oem5,
      "Oem5"
    },
    {
      Key.Oem6,
      "Oem6"
    },
    {
      Key.Oem7,
      "Oem7"
    },
    {
      Key.Oem8,
      "Oem8"
    },
    {
      Key.Oem102,
      "Oem102"
    }
  };

  public static string GetStringForUI(string key)
  {
    if (!string.IsNullOrEmpty(key))
    {
      Key key1 = EnumHelper.Parse<Key>(key, Key.NoName);
      if (key1 != Key.NoName)
        key = IMAPKeys.GetStringForUI(key1);
    }
    return key;
  }

  public static string GetStringForUI(Key key)
  {
    string str = key.ToString();
    if (IMAPKeys.mDictKeys.ContainsKey(key))
    {
      str = IMAPKeys.mDictKeys[key];
      if (str.StartsWith("Oem", StringComparison.OrdinalIgnoreCase))
        str = IMAPKeys.KeyCodeToUnicode(key);
    }
    return str;
  }

  public static string GetStringForFile(Key key)
  {
    string mDictKey = key.ToString();
    if (IMAPKeys.mDictKeys.ContainsKey(key))
      mDictKey = IMAPKeys.mDictKeys[key];
    return mDictKey;
  }

  public static string KeyCodeToUnicode(Key key)
  {
    int num = KeyInterop.VirtualKeyFromKey(key);
    uint wScanCode = InteropWindow.MapVirtualKey((uint) num, 0U);
    IntPtr keyboardLayout = InteropWindow.GetKeyboardLayout(0U);
    StringBuilder pwszBuff = new StringBuilder();
    InteropWindow.ToUnicodeEx((uint) num, wScanCode, new byte[(int) byte.MaxValue], pwszBuff, 5, 0U, keyboardLayout);
    Logger.Info("value........................." + pwszBuff.ToString());
    return pwszBuff.ToString();
  }
}
